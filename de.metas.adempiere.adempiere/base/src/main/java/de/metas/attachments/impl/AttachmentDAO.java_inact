package de.metas.attachments.impl;

import java.util.List;

import org.adempiere.ad.dao.IQueryBL;
import org.adempiere.ad.dao.IQueryBuilder;
import org.adempiere.exceptions.AdempiereException;
import org.adempiere.model.InterfaceWrapperHelper;
import org.adempiere.util.lang.ITableRecordReference;
import org.compiere.model.IQuery;
import org.compiere.model.I_AD_Attachment;
import org.compiere.model.I_AD_AttachmentEntry;
import org.compiere.model.I_AD_Attachment_MultiRef;
import org.compiere.model.X_AD_AttachmentEntry;

import de.metas.attachments.AttachmentEntry;
import de.metas.attachments.AttachmentEntryId;
import de.metas.attachments.IAttachmentDAO;
import de.metas.util.Services;
import lombok.NonNull;

/*
 * #%L
 * de.metas.adempiere.adempiere.base
 * %%
 * Copyright (C) 2015 metas GmbH
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program. If not, see
 * <http://www.gnu.org/licenses/gpl-2.0.html>.
 * #L%
 */

public class AttachmentDAO implements IAttachmentDAO
{
	@Override
	public List<I_AD_Attachment> retrieveAttachments(@NonNull final ITableRecordReference tableRecordReference)
	{
		final IQuery<I_AD_Attachment> directReferenceQuery = createDirectReferenceQuery(tableRecordReference);

		final List<I_AD_Attachment> attachmentRecords = createMultiRefQueryBuilder(tableRecordReference)
				.andCollect(I_AD_Attachment_MultiRef.COLUMN_AD_Attachment_ID)
				.create()
				.addUnion(directReferenceQuery, true)
				.list();

		return attachmentRecords;
	}

	private IQuery<I_AD_Attachment> createDirectReferenceQuery(@NonNull final ITableRecordReference tableRecordReference)
	{
		final IQueryBL queryBL = Services.get(IQueryBL.class);

		final int adTableId = tableRecordReference.getAD_Table_ID();
		final int recordId = tableRecordReference.getRecord_ID();

		final IQuery<I_AD_Attachment> directReferenceQuery = queryBL
				.createQueryBuilder(I_AD_Attachment.class)
				.addOnlyActiveRecordsFilter()
				.addEqualsFilter(I_AD_Attachment.COLUMNNAME_AD_Table_ID, adTableId)
				.addEqualsFilter(I_AD_Attachment.COLUMNNAME_Record_ID, recordId)
				.create();
		return directReferenceQuery;
	}

	@Override
	public List<I_AD_Attachment_MultiRef> retrieveAttachmentMultiRefs(@NonNull final I_AD_AttachmentEntry attachmentEntryRecord)
	{
		return Services.get(IQueryBL.class)
				.createQueryBuilder(I_AD_Attachment_MultiRef.class)
				.addOnlyActiveRecordsFilter()
				.addEqualsFilter(I_AD_Attachment_MultiRef.COLUMN_AD_Attachment_ID, attachmentEntryRecord.getAD_Attachment_ID())
				.create()
				.list();
	}

	@Override
	public I_AD_Attachment retrieveDirectReferenceAttachment(@NonNull final ITableRecordReference tableRecordReference)
	{
		return createDirectReferenceQuery(tableRecordReference)
				.firstOnly(I_AD_Attachment.class);
	}

	@Override
	public List<I_AD_Attachment_MultiRef> retrieveAttachmentMultiRefs(@NonNull final ITableRecordReference tableRecordReference)
	{
		return createMultiRefQueryBuilder(tableRecordReference)
				.create()
				.list();
	}

	private IQueryBuilder<I_AD_Attachment_MultiRef> createMultiRefQueryBuilder(@NonNull final ITableRecordReference tableRecordReference)
	{
		final int adTableId = tableRecordReference.getAD_Table_ID();
		final int recordId = tableRecordReference.getRecord_ID();

		final IQueryBL queryBL = Services.get(IQueryBL.class);
		return queryBL
				.createQueryBuilder(I_AD_Attachment_MultiRef.class)
				.addOnlyActiveRecordsFilter()
				.addEqualsFilter(I_AD_Attachment_MultiRef.COLUMNNAME_AD_Table_ID, adTableId)
				.addEqualsFilter(I_AD_Attachment_MultiRef.COLUMNNAME_Record_ID, recordId);
	}

	@Override
	public void saveAttachmentEntryData(final AttachmentEntry entry, final byte[] data)
	{
		final I_AD_AttachmentEntry entryRecord = InterfaceWrapperHelper.load(entry.getId(), I_AD_AttachmentEntry.class);
		if (X_AD_AttachmentEntry.TYPE_Data.equals(entryRecord.getType()))
		{
			throw new AdempiereException("Only entries of type Data support attaching data").setParameter("entry", entry);
		}

		entryRecord.setBinaryData(data);
		InterfaceWrapperHelper.save(entryRecord);
	}

	@Override
	public boolean deleteAttachmentEntryById(final int attachmentId, final AttachmentEntryId attachmentEntryId)
	{
		final int deleteCount = Services.get(IQueryBL.class).createQueryBuilder(I_AD_AttachmentEntry.class)
				.addEqualsFilter(I_AD_AttachmentEntry.COLUMNNAME_AD_Attachment_ID, attachmentId)
				.addEqualsFilter(I_AD_AttachmentEntry.COLUMNNAME_AD_AttachmentEntry_ID, attachmentEntryId)
				.create()
				.delete();
		return deleteCount > 0;
	}

	@Override
	public boolean hasAttachmentEntries(final int attachmentId)
	{
		return createAttachementEntryQuery(attachmentId)
				.match();
	}

	@Override
	public List<I_AD_AttachmentEntry> retrieveAttachmentEntries(I_AD_Attachment attachment)
	{
		return createAttachementEntryQuery(attachment.getAD_Attachment_ID()).list();
	}

	private IQuery<I_AD_AttachmentEntry> createAttachementEntryQuery(final int attachmentId)
	{
		return Services.get(IQueryBL.class)
				.createQueryBuilder(I_AD_AttachmentEntry.class)
				.addEqualsFilter(I_AD_AttachmentEntry.COLUMNNAME_AD_Attachment_ID, attachmentId)
				.create();
	}

}
